plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT' apply false
    id 'io.github.juuxel.loom-quiltflower-mini' version "1.2.0" apply false
    id 'maven-publish'
}
version = project.mod_version
group = project.maven_group

allprojects {
    apply plugin: "fabric-loom"
    apply plugin: "io.github.juuxel.loom-quiltflower-mini"
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    repositories {
        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/"
        }
        maven {
            name = "Ladysnake Libs"
            url = "https://ladysnake.jfrog.io/artifactory/mods"
        }
        maven { url = "https://oss.sonatype.org/content/repositories/releases/" }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
        modApi "net.fabricmc:fabric-loader:${rootProject.loader_version}"

        //this shouldn't need to be here
        implementation "de.javagl:obj:0.3.0"
        include "de.javagl:obj:0.3.0"
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    tasks.withType(JavaCompile) {
        it.options.encoding = "UTF-8"
        it.options.release.set(17)
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }

    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    loom {
        shareRemapCaches = true
    }
}

subprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'

    archivesBaseName = project.name
    group = "${rootProject.group}"
    version = rootProject.version

    dependencies {
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    }
}

repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    testImplementation project(":test")
    subprojects.each {
        String path = collectName(it)
        if (path != "test") {
            implementation project(":$path")
            afterEvaluate {
                include project(":${path}")
            }
        }
    }
}

private String collectName(it) {
    if (it.parent != null && it.parent.name != project.name) {
        return collectName(it.parent) + ":" + it.name
    }
    return it.name
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

subprojects.each {
    remapJar.dependsOn("${it.path}:remapJar")
}