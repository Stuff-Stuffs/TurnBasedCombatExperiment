import net.fabricmc.loom.task.RemapJarTask

import java.nio.charset.StandardCharsets
plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower-mini' version "1.1.0"
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

subprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'

    archivesBaseName = project.name
    group = "${rootProject.group}.${rootProject.archivesBaseName}"

    compileJava {
        options.encoding = StandardCharsets.UTF_8.name()
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
        classifier = "sources"
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        classifier = "javadoc"
    }
}

allprojects {
    apply plugin: "fabric-loom"
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_16
    version = rootProject.mod_version

    configurations {
        dev
    }

    repositories {
        maven { url = "https://oss.sonatype.org/content/repositories/releases/" }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
        modApi "net.fabricmc:fabric-loader:${rootProject.loader_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        //this shouldn't need to be here
        implementation "de.javagl:obj:0.3.0"
        include "de.javagl:obj:0.3.0"
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"
        it.options.release = 16
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }

    jar {
        archiveClassifier = "dev"
    }

    afterEvaluate {
        artifacts {
            dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
        }
    }
}

subprojects {
    version = rootProject.version
}

repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    modRuntime "curse.maven:LazyDFU-433518:3209972"
    testImplementation project(path: ":test", configuration: "dev")
    subprojects.each {
        String path = collectName(it)
        if(path != "test") {
            implementation project(path: ":${path}", configuration: "dev")
            include project(":${path}")
        }
    }
}

private String collectName(it) {
    if(it.parent !=null && it.parent.name != project.name) {
        return collectName(it.parent) + ":" + it.name
    }
    return it.name
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

task testmodJar(type: Jar, dependsOn: testmodClasses) {
    archiveBaseName = 'TurnBasedCombatTest'
    archiveClassifier = 'dev'
    from(sourceSets.testmod.output) {
        include 'fabric.mod.json'
        expand 'version': project.version
    }
    from(sourceSets.testmod.output) {
        exclude 'fabric.mod.json'
    }
}

task remapTestmodJar(type: RemapJarTask, dependsOn: project.testmodJar) {
    archiveBaseName = 'TurnBasedCombatTest'
    input = testmodJar.archiveFile
    addNestedDependencies = false
}

build.dependsOn(remapTestmodJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {
                builtBy(remapJar)
            }
            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}
tasks.publish.dependsOn build

